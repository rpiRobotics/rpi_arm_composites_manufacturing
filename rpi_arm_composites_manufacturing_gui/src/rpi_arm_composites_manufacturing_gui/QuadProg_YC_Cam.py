# -*- coding: utf-8 -*-

import numpy as np
from numpy.linalg import inv
from scipy.linalg import logm, norm, sqrtm

from pyquaternion import Quaternion
import quadprog



def nearestPD(A):
    """Find the nearest positive-definite matrix to input

    A Python/Numpy port of John D'Errico's `nearestSPD` MATLAB code [1], which
    credits [2].

    [1] https://www.mathworks.com/matlabcentral/fileexchange/42885-nearestspd

    [2] N.J. Higham, "Computing a nearest symmetric positive semidefinite
    matrix" (1988): https://doi.org/10.1016/0024-3795(88)90223-6
    """

    B = (A + A.T) / 2
    _, s, V = np.linalg.svd(B)

    H = np.dot(V.T, np.dot(np.diag(s), V))

    A2 = (B + H) / 2

    A3 = (A2 + A2.T) / 2

    if isPD(A3):
        return A3

    spacing = np.spacing(np.linalg.norm(A))
    # The above is different from [1]. It appears that MATLAB's `chol` Cholesky
    # decomposition will accept matrixes with exactly 0-eigenvalue, whereas
    # Numpy's will not. So where [1] uses `eps(mineig)` (where `eps` is Matlab
    # for `np.spacing`), we use the above definition. CAVEAT: our `spacing`
    # will be much larger than [1]'s `eps(mineig)`, since `mineig` is usually on
    # the order of 1e-16, and `eps(1e-16)` is on the order of 1e-34, whereas
    # `spacing` will, for Gaussian random matrixes of small dimension, be on
    # othe order of 1e-16. In practice, both ways converge, as the unit test
    # below suggests.
    I = np.eye(A.shape[0])
    k = 1
    while not isPD(A3):
        mineig = np.min(np.real(np.linalg.eigvals(A3)))
        A3 += I * (-mineig * k**2 + spacing)
        k += 1

    return A3

def isPD(B):
    """Returns true when input is positive-definite, via Cholesky"""
    try:
        _ = np.linalg.cholesky(B)
        return True
    except np.linalg.LinAlgError:
        return False

    
def getqp_H(J, UV):
    n = J.shape[0]

    H1 = np.dot(np.hstack((J,np.zeros((n,1)))).T,np.hstack((J,np.zeros((n,1)))))
    
    tmp = np.vstack((np.zeros((6,n)),UV.T)).T
    H2 = np.dot(tmp.T,tmp)

    H3 = -2*np.dot(np.hstack((J,np.zeros((n,1)))).T, tmp)
    H3 = (H3+H3.T)/2;


    H = 2*(H1+H2+H3)

    
    return H

def getqp_f():
    f = -2.0*np.array([0,0,0,0,0,0,0]).reshape(7,)
    
    return f



def QP_Cam(J,UV):

    Q = getqp_H(J, UV)
    # make sure Q is symmetric
    #Q = 0.5*(Q + Q.T)
    
    Q = nearestPD(Q)
    f = getqp_f()


    LB = np.vstack((-0.1*np.ones([6,1]),1.0))
    UB = np.vstack((0.1*np.ones([6,1]),2.0))
             

    A = np.vstack((np.eye(7), -np.eye(7)))
    b = np.vstack((LB, -UB))

    # solve the quadprog problem
    #print (np.linalg.eigvals(Q))
    
    dq_sln = quadprog.solve_qp(Q, -f, A.T, b.reshape((14, )))[0]

        
    #print  dq_sln[6]
    return dq_sln[0:6]
                           
'''        
if __name__ == '__main__':
    J = np.array([[-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015],
[0,0,0,0,0,0],
[-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432],
[0,0,0,0,0,0],
[-3476.946,-3476.946,-3476.946,-3476.946,-3476.946,-3476.946],
[0,0,0,0,0,0],
[-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813],
[0,0,0,0,0,0],
[-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646],
[0,0,0,0,0,0],
[-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148],
[0,0,0,0,0,0],
[-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532],
[0,0,0,0,0,0],
[-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075],
[0,0,0,0,0,0],
[-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903],
[0,0,0,0,0,0],
[-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681],
[0,0,0,0,0,0],
[-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854],
[0,0,0,0,0,0],
[-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054],
[0,0,0,0,0,0],
[-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545],
[0,0,0,0,0,0],
[-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503],
[0,0,0,0,0,0],
[-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874],
[0,0,0,0,0,0],
[-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974],
[0,0,0,0,0,0],
[-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015],
[0,0,0,0,0,0],
[-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432],
[0,0,0,0,0,0],
[-3476.946,-3476.946,-3476.946,-3476.946,-3476.946,-3476.946],
[0,0,0,0,0,0],
[-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813],
[0,0,0,0,0,0],
[-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646],
[0,0,0,0,0,0],
[-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148],
[0,0,0,0,0,0],
[-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532],
[0,0,0,0,0,0],
[-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075],
[0,0,0,0,0,0],
[-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903],
[0,0,0,0,0,0],
[-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681],
[0,0,0,0,0,0],
[-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854],
[0,0,0,0,0,0],
[-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054],
[0,0,0,0,0,0],
[-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545],
[0,0,0,0,0,0],
[-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503],
[0,0,0,0,0,0],
[-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874],
[0,0,0,0,0,0],
[-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974],
[0,0,0,0,0,0],
[-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015],
[0,0,0,0,0,0],
[-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432],
[0,0,0,0,0,0],
[-3476.946,-3476.946,-3476.946,-3476.946,-3476.946,-3476.946],
[0,0,0,0,0,0],
[-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813],
[0,0,0,0,0,0],
[-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646],
[0,0,0,0,0,0],
[-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148],
[0,0,0,0,0,0],
[-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532],
[0,0,0,0,0,0],
[-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075],
[0,0,0,0,0,0],
[-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903],
[0,0,0,0,0,0],
[-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681],
[0,0,0,0,0,0],
[-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854],
[0,0,0,0,0,0],
[-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054],
[0,0,0,0,0,0],
[-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545],
[0,0,0,0,0,0],
[-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503],
[0,0,0,0,0,0],
[-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874],
[0,0,0,0,0,0],
[-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974],
[0,0,0,0,0,0],
[-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015,-3531.2015],
[0,0,0,0,0,0],
[-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432,-3466.3432],
[0,0,0,0,0,0],
[-3476.946,-3476.946,-3476.946,-3476.946,-3476.946,-3476.946],
[0,0,0,0,0,0],
[-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813,-3435.0813],
[0,0,0,0,0,0],
[-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646,-3539.0646],
[0,0,0,0,0,0],
[-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148,-3500.9148],
[0,0,0,0,0,0],
[-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532,-3487.7532],
[0,0,0,0,0,0],
[-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075,-3454.7075],
[0,0,0,0,0,0],
[-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903,-3541.4903],
[0,0,0,0,0,0],
[-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681,-3247.2681],
[0,0,0,0,0,0],
[-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854,-3494.3854],
[0,0,0,0,0,0],
[-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054,-3458.7054],
[0,0,0,0,0,0],
[-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545,-3294.0545],
[0,0,0,0,0,0],
[-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503,-3510.0503],
[0,0,0,0,0,0],
[-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874,-3252.2874],
[0,0,0,0,0,0],
[-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974,-3462.0974],
[0,0,0,0,0,0]])
    UV = np.array([[ -2.75795046],
 [  9.54351135],
 [ -6.3392029 ],
 [  7.80958051],
 [ -7.39038169],
 [  6.41681894],
 [ -9.03699734],
 [  4.70650577],
 [ -3.54845048],
 [  3.32522503],
 [ -6.6521803 ],
 [  2.54456675],
 [ -7.54639962],
 [  1.4241065 ],
 [ -8.69956461],
 [  0.59616967],
 [ -4.44057517],
 [ -0.92005108],
 [-12.63016343],
 [ -7.31295638],
 [ -8.00960444],
 [ -1.80750345],
 [ -8.80075999],
 [ -2.14700891],
 [ -9.64877031],
 [-11.0645464 ],
 [ -8.01377684],
 [ -5.20482411],
 [-15.36574649],
 [-10.21710484],
 [ -9.23174789],
 [ -4.88425293],
 [ -5.97142407],
 [  7.94409658],
 [ -7.46067908],
 [  6.5094548 ],
 [ -8.88461702],
 [  5.12287596],
 [ -8.35086741],
 [  3.38861992],
 [ -6.78408885],
 [  2.88975162],
 [ -7.81374833],
 [  1.6546065 ],
 [ -8.79442261],
 [  0.86863784],
 [ -7.6003228 ],
 [ -0.28783347],
 [ -7.52857219],
 [ -1.2127112 ],
 [ -1.80529139],
 [ -6.37754175],
 [ -9.00597852],
 [ -1.98619047],
 [ -7.54013072],
 [ -2.19841506],
 [ -2.25620917],
 [ -9.75206521],
 [ -9.12134175],
 [ -5.51365508],
 [ -3.63225474],
 [ -9.92918609],
 [ -7.93170407],
 [ -4.56520919],
 [ -6.51907456],
 [  4.26723877],
 [ -6.85751968],
 [  3.29405163],
 [ -8.72295899],
 [  2.3967414 ],
 [ -7.7225944 ],
 [  0.97568829],
 [ -7.38090255],
 [ -0.95560834],
 [ -8.35843448],
 [ -1.55653208],
 [ -9.00002201],
 [ -1.94103573],
 [ -7.75497469],
 [ -2.46779305],
 [ -7.90081353],
 [ -4.02133315],
 [ -4.18288002],
 [  0.8778316 ],
 [ -9.53327721],
 [ -4.21216307],
 [ -7.61502577],
 [ -3.96380426],
 [ -3.94257787],
 [ -1.33059164],
 [ -9.60255452],
 [ -7.07751104],
 [ -4.82577519],
 [ -1.81330258],
 [ -8.23057352],
 [ -5.51915274],
 [ -3.44575152],
 [  5.33903308],
 [ -6.7607327 ],
 [  4.04615501],
 [ -7.68865352],
 [  3.14935478],
 [ -8.76297442],
 [  2.01886286],
 [ -4.35556337],
 [ -0.61259558],
 [ -7.29833582],
 [ -1.08767872],
 [ -7.87736483],
 [ -1.63420743],
 [ -8.91773139],
 [ -1.83300505],
 [ -5.16515821],
 [ -4.44119179],
 [-14.24531814],
 [  1.4788548 ],
 [ -8.67026094],
 [ -4.35546561],
 [ -8.98957486],
 [ -4.00474259],
 [-11.55118159],
 [ -1.12731019],
 [ -8.68372382],
 [ -7.25652961],
 [-17.7638498 ],
 [ -2.5379948 ],
 [ -9.70556368],
 [ -6.3134415 ]])

    print np.linalg.pinv(J)
    print np.dot(np.linalg.pinv(J),UV)
    print QP_Cam(J,UV)
'''    
