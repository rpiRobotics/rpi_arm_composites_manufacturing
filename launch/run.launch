<?xml version="1.0"?>

<launch>

  <!-- Master launch file for RPI ARM composites manufacturing quick start project -->

  <arg name="joy_dev" default="/dev/input/js0"/>
  <arg name="abb_irc5_uri" default="http://192.168.1.1/"/>
  <arg name="netft_host" default="192.168.1.2"/>
  <arg name="abb_irc5_rapid_auto_stop" default="true"/>

  <!--<node name="record" pkg="rosbag" type="record" args="-a"/>-->


  <arg name="sim" default="false"/>
  <arg name="use_robot_studio" default="false"/>
  <arg name="robot_studio_plugin_url" default=""/>
  
  <param name="move_group/trajectory_execution/allowed_execution_duration_scaling" value="4.0" />
  <param name="move_group/trajectory_execution/execution_duration_monitoring" value="false" />
  <param name="move_group/trajectory_execution/controller_connection_timeout" value="120"/>
  
  <arg name="disable_joy" default="false"/>
  <node respawn="true" pkg="joy" type="joy_node" name="joy" unless="$(arg disable_joy)">
    <param name="dev" type="string" value="$(arg joy_dev)" />
    <param name="deadzone" value="0.12" />
    <param name="autorepeat_rate" value="20" />
  </node>

  <arg name="disable_moveit" default="false"/>
  <include file="$(find rpi_arm_composites_manufacturing_testbed_moveit_config)/launch/moveit_planning_execution.launch" unless="$(arg disable_moveit)">
    <arg name="start_interface" value="false"/>
    <arg name="planning_pipeline" value="ompl"/>
  </include>

  <rosparam param="controller_joint_names" subst_value="True">["joint_1","joint_2","joint_3","joint_4","joint_5","joint_6"]</rosparam>

  <arg name="disable_kinematic_controller" default="false"/>
  <group unless="$(arg disable_kinematic_controller)">
    <include file="$(find safe_kinematic_controller_abb_irc5_egm)/launch/safe_kinematic_controller_abb_irc5_egm.launch" if="$(eval (not arg('sim') or arg('use_robot_studio')))">
      <arg name="netft_host" value="$(arg netft_host)"/>    
    </include>
    <group unless="$(eval (not arg('sim') or arg('use_robot_studio')))">
      <rosparam param="controller_joint_names" subst_value="True">["joint_1","joint_2","joint_3","joint_4","joint_5","joint_6"]</rosparam>
      <node name="fake_robot" pkg="safe_kinematic_controller_fake_robot" type="fake_robot_ros" required="true" output="screen">
        <param name="publish_frequency" value="50"/>
      </node>
      <node name="safe_kinematic_controller" pkg="safe_kinematic_controller" type="safe_kinematic_controller_ros" required="true" output="screen"/>
    </group>
  </group>
    
  <arg name="disable_rapid_server" default="false"/>
  <group unless="$(arg disable_rapid_server)">
    <include file="$(find rpi_abb_irc5)/launch/abb_irc5_rapid_driver.launch" if="$(eval (not arg('sim') or arg('use_robot_studio')))">
      <arg name="abb_irc5_uri" value="$(arg abb_irc5_uri)"/>
    </include>
    <node name="fake_abb_irc5_rapid_driver" pkg="rpi_arm_composites_manufacturing_testbed" type="fake_abb_irc5_rapid_driver_ros" unless="$(eval (not arg('sim') or arg('use_robot_studio')))"/>
  </group>

  <!--<node pkg="rosservice" type="rosservice" name="start_rapid" args="call -wait rapid/start True forever" unless="$(arg disable_rapid_server)"/>-->

  <arg name="disable_rviz_sim_cameras" default="false"/>
  <group unless="$(arg disable_rviz_sim_cameras)">
  <include file="$(find rpi_arm_composites_manufacturing_testbed)/launch/rviz_sim_cameras.launch" if="$(arg sim)"/>
  <!--<include file="$(find rpi_arm_composites_manufacturing_testbed)/launch/rviz_sim_cameras_params.launch" if="$(arg sim)"/>-->
  </group>
  
  <node name="overhead_image_view" pkg="image_view" type="image_view" args="image:=/overhead_camera/image"/>
 
  <include file="$(find rpi_arm_composites_manufacturing_testbed)/launch/load_payloads.launch" if="$(arg sim)"/>
  <include file="$(find rpi_arm_composites_manufacturing_testbed)/launch/load_payloads_real.launch" unless="$(arg sim)"/>
  <!-- TODO: use a package for vision server instead of this script -->
  <arg name="disable_vision_server" default="false"/>
  <node name="ptgrey_vision_server" pkg="Vision_MoveIt_wason" type="ptgrey_vision_server" if="$(arg sim)"/>
  <node name="pyspin_gripper_proximal_service" pkg="pyspin_wrapper" type="pyspin_gripper_proximal_service.py" respawn="false" unless="$(arg sim)"/>
  <node name="pyspin_gripper_distal_service" pkg="pyspin_wrapper" type="pyspin_gripper_distal_service.py" respawn="false"/>
  <node pkg="rostopic" type="rostopic" name="overhead_camera_info" args="pub -f $(find rpi_arm_composites_manufacturing_testbed)/config/overhead_camera_sim_camera_info.yaml -l /overhead_camera/camera_info sensor_msgs/CameraInfo"/>
  <node pkg="rostopic" type="rostopic" name="gripper_camera_2_info" args="pub -f $(find rpi_arm_composites_manufacturing_testbed)/config/gripper_camera_2_sim_camera_info.yaml -l /gripper_camera_2/camera_info sensor_msgs/CameraInfo"/>
  <arg name="disable_process_controller_server" default="false"/>
  <node name="process_controller_server" pkg="rpi_arm_composites_manufacturing_process" type="process_controller_server" unless="$(arg disable_process_controller_server)">
	<!-- Use simulated force sensor! -->
    <!-- <param name="disable_ft" value="$(arg sim)"/> -->
  </node>
  <arg name="disable_collision_monitor" default="false"/>
  <node pkg="tesseract_monitoring" type="tesseract_monitoring_contacts_node" name="tesseract_monitoring_contacts" unless="$(arg disable_collision_monitor)">
    <param name="robot_description" type="string" value="robot_description"/>
    <param name="plugin" type="string" value="tesseract_collision/BulletDiscreteBVHManager"/>
    <param name="contact_distance" value="0.5"/>
    <param name="monitor_links" value=""/>
    <param name="contact_test_type" value="2"/>
    <param name="publish_environment" value="false"/>
    <remap from="/tesseract_monitoring_contacts/tesseract_diff" to="tesseract_diff"/>
  </node>
  <arg name="disable_placement_controller_server" default="false"/>
  <node name="placement_controller_server" pkg="pbvs_object_placement" type="placement_controller_server" unless="$(arg disable_placement_controller_server)" >
    <param name="camera_info" value="gripper_camera_2/camera_info" />
    <param name="image_topic" value="gripper_camera_2/image" />
    <param name="camera_trigger" value="gripper_camera_2/camera_trigger" />
  </node>
  <arg name="disable_industrial_payload_manager" default="false"/>
  <node name="industrial_payload_manager" pkg="industrial_payload_manager" type="industrial_payload_manager" unless="$(arg disable_industrial_payload_manager)">        
  </node>
 

  <!-- TODO: launch GUI -->
  <arg name="disable_gui" default="false"/>
  <node name="rqt_gui" pkg="rqt_gui" type="rqt_gui" unless="$(arg disable_gui)"/>
  <node name="floating_transform_publisher" pkg="floating_transform_publisher" type="floating_transform_publisher"/>

  <node name="force_sensor_sim" pkg="rpi_arm_composites_manufacturing_testbed" type="force_sensor_sim_node" if="$(arg sim)"/>

  <!--<node name="force_sensor_sim" pkg="rpi_arm_composites_manufacturing_testbed" type="force_sensor_robotstudio_node" if="$(arg sim)"/>-->

</launch>
